Prerequisites

git with language aware diffs (https://urbanautomaton.com/blog/2011/07/28/git-grep-and-language-specific-diffs/)
cloc
pip install radon


# Files with the most commit
git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -gr | head -25

git log other options
--after=2016-01-01
-- dir/to/limit

git rev-list

# Nb of contributors
git shortlog -s | wc -l

# Comment voir les parties du fichier qui sont les plus modifiées ?
grep def <file>

# Toutes les versions d'une fonction (limits : if changed file or method with the same name as a function)
git log -L:_update_customer:src/service/NewPersonManagement.py

# Combien de commits ont modifié cette fonction (si la fonction a été renommée, il faut utiliser le nom actuel mais normalement on a l'historique complet)
git log -L:_update_customer:src/service/NewPersonManagement.py | grep 'commit ' | wc -l

# Gros contributeurs d'un fichier/dossier
git shortlog -s -- src/clouddc/ | sort -rg

# qui a modifié en dernier les lignes du fichier
git blame --line-porcelain src/service/AccessLinkManagement.py | sed -n 's/^author //p' | sort | uniq -c | sort -rn

configure .mailmap pour les gens qui ont plusieurs alias
https://github.com/git/git/blob/master/Documentation/mailmap.txt
git log --format='<%aE> %aN' | sort -u

# Date de dernière modif
git log -1 --format="%ad" --date=short -- src/service/NewPersonManagement.py

# Age median du fichier
git blame --line-porcelain src/service/AccessLinkManagement.py | sed -n 's/^committer-time //p' -> calc median then date --date='@...'
# Sur AccessLinkManagement il y a beaucoup de commits récents pour rendre le fichier compatible avec black, donc du lint et ça fausse les résultats
# mais git blame accepte un commit comme argument comme fe25b6d (ou fe25b6d^ pour dire le parent de fe25b6d) donc on peut se placer avant ça



# code similarity between functions

# stats for added & removed LOC
git log --numstat

cloc .  --quiet

# Split repo yes, but keep history
https://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/

# Complexity evolution
# We want to analyze snapshots of the repo
# 1. Identify a relevant commit
git checkout `git rev-list -1 --before="Jan 01 2016" master --format=oneline | awk '{print $1;}'`

# 2. Analysis
https://radon.readthedocs.io/en/latest/api.html
# Global analysis, identify methods to investigate
radon cc -n F -s . > pb_methods
# Specific
radon cc -s src/service/NewPersonManagement.py | grep update_customer | awk '{ print $6 }'

# change coupling
# - Files touched by a commit (merge commits return nothing)
git diff-tree --no-commit-id --name-only -r <commit>

# Find if a commit is a merge, if more than one line
git cat-file -p <commit> | grep parent


# Code maat

docker build -t code_maat .

generate log file
git log --all --numstat --date=short --pretty=format:'--%h--%ad--%aN' --no-renames > ../code-maat/git.log

docker run -v /home/jmaurice/code/code-maat:/data -it code_maat -l /data/git.log -c git2 -a <analysis>

Analysis :
abs-churn, age, author-churn, authors, communication, coupling, entity-churn, entity-effort, entity-ownership, fragmentation, identity, main-dev, main-dev-by-revs, messages, refactoring-main-dev, revisions, soc, summary






code-forensics (https://github.com/smontanari/code-forensics)
---------------

create gulpfile.js

require('code-forensics').configure(
  {
    repository: {
        rootPath: "/home/jmaurice/airdrum/",
        excludePaths: ["airdrum-static", "back_env", "htmlcov", "static"]
    }
  }
);


gulp webserver

* sloc-trend-analysis                 : Analyse the sloc trend in time for a particular file
* sum-of-coupling-analysis            : Analyse the sum of coupling for each file
* temporal-coupling-analysis          : Analyse the evolution of coupling in time for a particular file
* hotspot-analysis                    : Analyse the complexity and churn of source code to identify hotspots
* commit-message-analysis             : Analyse the number of occurrencies of commit message words
* developer-effort-analysis           : Analyse the distribution of effort (revisions) amongst developers/teams
* developer-coupling-analysis         : Analyse the ownership and communication coupling between developers
* knowledge-map-analysis              : Analyse the distribution of knowledge amongst developers/teams for each file


bugged
* system-evolution-analysis           : Analyse the evolution and the coupling in time of different parts of your system
* javascript-complexity-trend-analysis: Analyse the complexity trend in time for a particular javascript file
* ruby-complexity-trend-analysis      : Analyse the complexity trend in time for a particular ruby file


gulp system-evolution-analysis --dateFrom='2019-06-14' --dateTo='2020-06-14' [--targetFile=...]


git log --format=format: --name-only --since=12.month \
 | egrep -v '^$' \
 | sort \
 | uniq -c \
 | sort -nr \
 | head -50

